let GraphQLScalarType,Kind,format;_7e4‍.x([["default",()=>_7e4‍.o]]);_7e4‍.w("graphql",[["GraphQLScalarType",["GraphQLScalarType"],function(v){GraphQLScalarType=v}],["Kind",["Kind"],function(v){Kind=v}]]);_7e4‍.w("date-fns",[["format",["format"],function(v){format=v}]]);


const dateScalar = new GraphQLScalarType({
  name: 'Date',
  description: 'Date custom scalar type',
  serialize(value) {
    return format(value, 'MMM-dd-yyyy'); // Convert outgoing Date to integer for JSON
  },
  parseValue(value) {
    return new Date(value); // Convert incoming integer to Date
  },
  parseLiteral(ast) {
    if (ast.kind === Kind.STRING) {
      return new Date(ast.value); // Convert hard-coded AST string to Date
    }
    return null; // Invalid hard-coded value (not a string)
  },
});

_7e4‍.d(dateScalar);